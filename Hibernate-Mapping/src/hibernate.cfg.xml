<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
    	<!-- Hibernate 连接数据库的基本信息 -->
    	<property name="connection.username">root</property>
    	<property name="connection.password">123456</property>
    	<property name="connection.driver_class">com.mysql.jdbc.Driver</property>
    	<property name="connection.url">jdbc:mysql:///hibernate5</property>
    	
    	<!-- Hibernate 的基本配置 -->
    	<!-- Hibernate 使用的数据库方言 -->
    	<property name="dialect">org.hibernate.dialect.MySQLInnoDBDialect</property>
    	<!-- 运行时是否打印SQL -->
    	<property name="show_sql">true</property>
    	<!-- 运行时是否格式化SQL -->
    	<property name="format_sql">true</property>
    	<!-- 生成数据表的策略 -->
    	<property name="hbm2ddl.auto">update</property>
    	<!-- 设置hibernate的事务的隔离级别 -->
    	<property name="connection.isolation">2</property>
    	<!-- 删除对象后，使其OID置为null -->
		<property name="use_identifier_rollback">true</property>
		
		<!-- 配置c3p0数据源 -->
		<property name="hibernate.c3p0.max_size">10</property>
		<property name="hibernate.c3p0.min_size">2</property>
		<property name="c3p0.acquire_increment">2</property>
		<property name="c3p0.idle_test_period">2000</property>
		<property name="c3p0.timeout">2000</property>
		<property name="c3p0.max_statements">10</property>
		
		<!-- 设定JDBC 的Statement 读取数据的时候每次从数据库中读取的记录的条数 -->
		<!-- 
			Hibernate.jdbc.fetch_size:实质是调用Statement.setFetchSize()方法设定JDBC的Statement 
			读取数据的时候每次从数据库中读取的记录的条数。
			-例如一次查询1万条记录，对Oraclede的JDBC驱动来说，是不会 1 次把 1 万条取出来的，而只会去除fetchSize 条数，
			当结果集遍历完这些记录以后再去取fetchSize条数据。因此大大的节省可无谓的内存消耗。FetchSize设的越大，读取数据库的次数越少，速度越快:
			Fetch Size 越小，读取数据库的次数越多，熟读越慢。Oracle数据库的JDBC驱动默认的FetchSize = 10， 是一个保守设定，
			根据测试，当Fetch Size = 50时，性能会提升1一倍之多，当fetchSize=100，性能还能继续提升20%，
			fetchSize继续增大，性能提升的就不是显著了，并不是所有的数据库都支持Fetch Size特性，例如Mysql就不支持
			.Hibernate.jdbc.batch_size: 设定对数据库进行批量删除，批量更新和批量插入的时候的批次大小，类似于设置缓存区到校的意思。batchSize越大
			，批量操作是象数据库发送sql 的次数越少，速度就越块。
			-测试结果是当Batch Size=0的时候，使用Hibernare 对 Oracle数据库删除 1 万条记录需要25秒，bathch Size = 50 的时候，删除仅需要5秒
			Oracle数据库 batchSize=30的时候比较适合。 
		
		 -->
		<property name="hibernate.jdbc.fetch_size">100</property>
		
		<!-- 设定对数据库进行批量删除，批量更新批量插入的时候的批次大小 -->
		<property name="jdbc.batch_size">30</property>
    	
    	<!-- 需要关联的hibernate 映射文件 .hbm.xml -->
    	<!-- 
    	<mapping resource="com/kay/hibernate/entities/n21/Customer.hbm.xml"/>
    	<mapping resource="com/kay/hibernate/entities/n21/Order1.hbm.xml"/>
    	 
    	<mapping resource="com/kay/hibernate/entities/n21/both/Customer.hbm.xml"/>
    	<mapping resource="com/kay/hibernate/entities/n21/both/Order1.hbm.xml"/>
    	
    	<mapping resource="com/kay/hibernate/one2one/foreign/Manager.hbm.xml"/>
    	<mapping resource="com/kay/hibernate/one2one/foreign/Department.hbm.xml"/>
    	
    	<mapping resource="com/kay/hibernate/one2one/primary/Manager.hbm.xml" />
    	<mapping resource="com/kay/hibernate/one2one/primary/Department.hbm.xml" />
    	
    	<mapping resource="com/kay/hibernate/n2n/Category.hbm.xml" />
    	<mapping resource="com/kay/hibernate/n2n/Item.hbm.xml" />
    	
    	<mapping resource="com/kay/hibernate/subclass/Person.hbm.xml"/>
    	
    	<mapping resource="com/kay/hibernate/joined/subclass/Person.hbm.xml"/>
    	
    	<mapping resource="com/kay/hibernate/union/subclass/Person.hbm.xml"/>
    	-->
    	
    	<mapping resource="com/kay/hibernate/strategy/Customer.hbm.xml"/>
    	<mapping resource="com/kay/hibernate/strategy/Order1.hbm.xml"/>
    </session-factory>
</hibernate-configuration>
